{"ast":null,"code":"var _jsxFileName = \"/Users/abelphilip/Documents/GitHub/CMSC421/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport SimpleTabs from './index.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [input, setInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSubmit = async endpoint => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: input\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error, Status: ${response.status}`);\n      }\n      const data = response.status !== 204 ? await response.text() : {};\n      try {\n        let jsonData = JSON.parse(data);\n        setResponse(jsonData.response || \"No Response body.\");\n      } catch (error) {\n        console.error('Error parsing JSON:', error);\n        setResponse(\"Response is not in JSON Format.\");\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setResponse(\"Failed to fetch response.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(SimpleTabs, {\n      input: input,\n      onInputChange: handleInputChange,\n      onSubmit: handleSubmit,\n      response: response,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Ggm0VxumSTB4Ca6+wd6rQCoWImQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SimpleTabs","jsxDEV","_jsxDEV","App","_s","input","setInput","response","setResponse","loading","setLoading","handleInputChange","event","target","value","handleSubmit","endpoint","fetch","method","headers","body","JSON","stringify","prompt","ok","Error","status","data","text","jsonData","parse","error","console","children","onInputChange","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abelphilip/Documents/GitHub/CMSC421/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport SimpleTabs from './index.js'; \n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleSubmit = async (endpoint) => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ prompt: input }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error, Status: ${response.status}`);\n      }\n      const data = response.status !== 204 ? await response.text() : {}\n\n      try{\n        let jsonData = JSON.parse(data)\n        setResponse(jsonData.response || \"No Response body.\")\n      } catch (error){\n        console.error('Error parsing JSON:',error)\n        setResponse(\"Response is not in JSON Format.\")\n      }\n    \n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setResponse(\"Failed to fetch response.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <SimpleTabs\n        input={input}\n        onInputChange={handleInputChange}\n        onSubmit={handleSubmit}\n        response={response}\n        loading={loading}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMY,iBAAiB,GAAIC,KAAK,IAAK;IACnCN,QAAQ,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;IACvCN,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMH,QAAQ,GAAG,MAAMU,KAAK,CAAE,GAAED,QAAS,EAAC,EAAE;QAC1CE,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAElB;QAAM,CAAC;MACxC,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACiB,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBlB,QAAQ,CAACmB,MAAO,EAAC,CAAC;MAC3D;MACA,MAAMC,IAAI,GAAGpB,QAAQ,CAACmB,MAAM,KAAK,GAAG,GAAG,MAAMnB,QAAQ,CAACqB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;MAEjE,IAAG;QACD,IAAIC,QAAQ,GAAGR,IAAI,CAACS,KAAK,CAACH,IAAI,CAAC;QAC/BnB,WAAW,CAACqB,QAAQ,CAACtB,QAAQ,IAAI,mBAAmB,CAAC;MACvD,CAAC,CAAC,OAAOwB,KAAK,EAAC;QACbC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAACA,KAAK,CAAC;QAC1CvB,WAAW,CAAC,iCAAiC,CAAC;MAChD;IAEF,CAAC,CAAC,OAAOuB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CvB,WAAW,CAAC,2BAA2B,CAAC;IAC1C,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACER,OAAA;IAAA+B,QAAA,eACE/B,OAAA,CAACF,UAAU;MACTK,KAAK,EAAEA,KAAM;MACb6B,aAAa,EAAEvB,iBAAkB;MACjCwB,QAAQ,EAAEpB,YAAa;MACvBR,QAAQ,EAAEA,QAAS;MACnBE,OAAO,EAAEA;IAAQ;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACnC,EAAA,CApDQD,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AAsDZ,eAAeA,GAAG;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}